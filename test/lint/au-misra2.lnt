
// au-misra2.lnt -- Author options - MISRA 2004

/*
    This options file can be used to explicitly activate those
    checks advocated by the Motor Industry Software Reliability
    Association.

    You can use this file directly when linting your programs as in:

    lin  au-misra2  files

    Gimpel Software relies on the document, "MISRA-C:2004
    Guidelines for the use of the C language in critical systems",
    copyright 2004 by MIRA Limited, as the primary source for this
    file.  Gimpel Software makes no warranty as to the completeness
    or applicability of this options file and reserves the right to
    amend or alter the official contents of such at any time.

    "MISRA" is a registered trademark of MIRA Limited, held on
    behalf of the MISRA Consortium.

 */
    -misra(2)
    +e960                      /* enable special MISRA 2 messages */
    +elib(960)                 /* enable special MISRA 2 messages */
    +e961                      /* enable special MISRA 2 messages */
    +elib(961)                 /* enable special MISRA 2 messages */

/* Rule 1.1 (req) **********************************/

    -A(C90)                    /* strict ANSI */
    +e950                      /* flag non-ANSI word or construct */
    +elib(950)                 /* flag non-ANSI word or construct */
    -append(950,[MISRA 2004 Rules 1.1 and 2.2])

/* Rule 1.2 (req) **********************************/

    /* Avoid the use of undefined or unspecified behavior as described
       in ISO C, Appendix A.6.1 and Appendix A.6.2 */

    /* Source file not ending in a new-line character, ending in
       new-line character immediately preceded by a backslash
       character, or ending in a partial preprocessing token or
       comment (ISO C, Appendix A.6.2, point 1).
     */
    +e406
    +elib(406)
    -append(406,[MISRA 2004 Rule 1.2])

    /* Non-standard character usage (ISO C, Appendix A.6.2, point 2).
     */
    +e27
    +elib(27)
    -append(27,[MISRA 2004 Rule 1.2])

    /* Unclosed quotes (ISO C, Appendix A.6.2, point 4).
     */
    +e2
    +elib(2)
    -append(2,[MISRA 2004 Rule 1.2])

    /* Repeated label within a function (ISO C, Appendix A.6.2, point
       5).
     */
    +e31
    +elib(31)
    -append(31,[MISRA 2004 Rule 1.2])

    /* Non-visible identifier used (ISO C, Appendix A.6.2, point 6).
     */
    +e40
    +elib(40)
    -append(40,[MISRA 2004 Rule 1.2])

    /* Identifiers for the same entity differ beyond the minimal
       significant characters (ISO C, Appendix A.6.2, point 7).
       See Rules 1.4 and 5.1
     */

    /* The same identifier has both internal and external linkage in
       the same translation unit (ISO C, Appendix A.6.2, point 8).
     */
    +e401
    +elib(401)
    -append(401,[MISRA 2004 Rule 1.2])

    /* Multiple definitions for the same externally linked identifier
       (ISO C, Appendix A.6.2, point 9).
     */
    +e31
    +elib(31)

    /* Using automatic storage data via a pointer after the data's
       lifetime (ISO C, Appendix A.6.2, point 10).
     */
    +e604
    +elib(604)
    -append(604,[MISRA 2004 Rule 1.2])
    +e934
    +elib(934)
    -append(934,[MISRA 2004 Rule 1.2])

    /* Incompatible redeclarations (ISO C, Appendix A.6.2, point 11).
       See Rule 8.3
     */

    /* Non-standard escape sequence (ISO C, Appendix A.6.2, point 12).
       See Rule 4.1
     */

    /* Non-standard character in header name (ISO C, Appendix A.6.2,
       point 15).
       See Rule 19.2
     */

    /* No complete type available (ISO C, Appendix A.6.2, point 16).
     */
    +e86
    +elib(86)
    -append(86,[MISRA 2004 Rule 1.2])

    /* Using or converting a void expression (ISO C, Appendix A.6.2,
       point 17).
     */
    +e64
    +elib(64)
    -append(64,[MISRA 2004 Rule 1.2])
    +e67
    +elib(67)
    -append(67,[MISRA 2004 Rule 1.2])
    +e144
    +elib(144)
    -append(144,[MISRA 2004 Rule 1.2])

    /* Modifying an object more than once or modifying and accessing
       between two sequence points (ISO C, Appendix A.6.2, point 18).
       See Rule 12.2
     */

    /* Invalid arithmetic operations or unrepresentable results
       (ISO C, Appendix A.6.2, point 19).
     */
    +e54
    +elib(54)
    -append(54,[MISRA 2004 Rule 1.2])
    +e414
    +elib(414)
    -append(414,[MISRA 2004 Rule 1.2])
    +e795
    +elib(795)
    -append(795,[MISRA 2004 Rule 1.2])
    /* Also, see Rule 12.11 */

    /* Passing a void argument to a function (ISO C, Appendix A.6.2,
       point 20).
     */
    +e64
    +elib(64)

    /* Incompatible function redeclaration (ISO C, Appendix A.6.2,
       point 22).
       See Rule 8.3
     */

    /* An invalid array reference, null pointer reference, or
       reference to an object declared with automatic storage duration in
       a terminated block occurs (ISO C, Appendix A.6.2, point 24).
     */
    +e64
    +elib(64)
    +e413
    +elib(413)
    -append(413,[MISRA 2004 Rule 1.2])
    +e415
    +elib(415)
    -append(415,[MISRA 2004 Rule 1.2])
    +e416
    +elib(416)
    -append(416,[MISRA 2004 Rule 1.2])
    +e428
    +elib(428)
    -append(428,[MISRA 2004 Rule 1.2])
    /* Also, see Rule 17.6 */

    /* A pointer to a function is converted to a pointer to an object
       or a pointer to an object is converted to a pointer to a function
       (ISO C, Appendix A.6.2, point 26).
     */
    +e64
    +elib(64)
    +e740
    +elib(740)
    -append(740,[MISRA 2004 Rule 1.2])
    /* Also, see Rule 11.2 */

    /* A pointer is converted to other than an integral or pointer
       type (ISO C, Appendix A.6.2, point 27).
     */
    +e64
    +elib(64)
    +e71
    +elib(71)
    +esym(920,pointer)
    -append(920,[MISRA 2004 Rule 1.2])

    /* An expression is shifted by a negative number or by an amount
       greater than or equal to the width in bits of the expression being
       shifted (ISO C, Appendix A.6.2, point 30).
     */
    +e504
    +elib(504)
    -append(504,[MISRA 2004 Rule 1.2])

    /* An identifier for an object is declared with no linkage and the
       type of the object is incomplete after its declarator, or after its
       init-declarator if it has an initializer (ISO C, Appendix
       A.6.2, point 33).
     */
    +e86
    +elib(86)

    /* Declaring a function at block scope with a storage-class
       specifier other than extern (ISO C, Appendix A.6.2, point 34).
     */
    +e629
    +elib(629)
    -append(629,[MISRA 2004 Rule 1.2])

    /* A bit-field is declared with a type other than int, signed int,
       or unsigned int (ISO C, Appendix A.6.2, point 35).
       See Rule 6.4
     */

    /* Attempting to modify an object with const-qualified type by
       means of an lvalue with non-const-qualified type (ISO C,
       Appendix A.6.2, point 36).
     */
    +e158
    +elib(158)
    -append(158,[MISRA 2004 Rule 1.2])

    /* Attempting to refer to an object with volatile-qualified type
       by means of an lvalue with non-volatile-qualified type (ISO C,
       Appendix A.6.2, point 37).
     */
    +e158
    +elib(158)

    /* Using the value of uninitialized automatic object (ISO C,
       Appendix A.6.2, point 38).
       See Rule 9.1
     */

    /* An object with aggregate or union type with static storage
       duration has a non-brace-enclosed initializer, or an object
       with aggregate or union type with automatic storage duration
       has either a single expression initializer with a type other
       than that of the object or a non-brace-enclosed initializer
       (ISO C, Appendix A.6.2, point 39).
       Also, see Rule 9.2
     */
    +e64
    +elib(64)

    /* The value of a function is used, but no value was returned
       (ISO C, Appendix A.6.2, point 40).
       See Rule 16.8
     */

    /* A function that accepts a variable number of arguments is
       defined without a parameter type list that ends with the
       ellipsis notation (ISO C, Appendix A.6.2, point 41).
       See Rule 8.3
     */

    /* An identifier for an object with internal linkage and an
       incomplete type is declared with a tentative definition (ISO C,
       Appendix A.6.2, point 42).
     */
    +e86
    +elib(86)

    /* Non-standard #include preprocessing directive (ISO C, Appendix
       A.6.2, point 44).
       See Rule 19.3
     */

    /* Non-standard #line directive (ISO C, Appendix A.6.2, point 49).
     */
    +"estring(10,a numeric constant)"

    /* #defining or #undefing any of: defined, __LINE__, __FILE__,
       __DATE__, __TIME__, or __STDC__ (ISO C, Appendix A.6.2, point 50).
     */
    +e136
    +elib(136)
    -append(136,[MISRA 2004 Rule 1.2])

    /* Format-argument mismatch in an fprintf or fscanf type of
       function (ISO C, Appendix A.6.2, point 75).
     */
    +e558
    +elib(558)
    -append(558,[MISRA 2004 Rule 1.2])
    +e719
    +elib(719)
    -append(719,[MISRA 2004 Rule 1.2])

    /* A %% conversion specification for the fprintf or fscanf
       function contains characters between the pair of % characters
       (ISO C, Appendix A.6.2, point 77).
     */
    +e557
    +elib(557)
    -append(557,[MISRA 2004 Rule 1.2])

    /* An aggregate or union, or a pointer to an aggregate or union is
       an argument to the fprintf function, except for the conversion
       specifiers %s (for an array of character type) or %p (for a pointer
       to void) (ISO C, Appendix A.6.2, point 81).
     */
    +e437
    +elib(437)
    -append(437,[MISRA 2004 Rule 1.2])

    /* Referring to deallocated space (ISO C, Appendix A.6.2, point
       87).
     */
    +e449
    +elib(449)
    -append(449,[MISRA 2004 Rule 1.2])

    /* Misuse of free or realloc (ISO C, Appendix A.6.2, point 88).
     */
    +esym(424,free)
    -append(424,[MISRA 2004 Rule 1.2])

    /* An array written to by a copying or concatenation function is
       too small (ISO C, Appendix A.6.2, point 91).
     */
    +e419
    +elib(419)
    -append(419,[MISRA 2004 Rule 1.2])

    /* Order of evaluation (ISO C, Appendix A.6.1, point 7).
     */
    +e564
    +elib(564)

    /* Side effects order (ISO C, Appendix A.6.1, point 8).
     */
    +e931
    +elib(931)
    -append(931,[MISRA 2004 Rule 1.2])

    /* Function argument evaluation (ISO C, Appendix A.6.1, point 9).
     */
    +e564
    +elib(564)

    /* The order in which # and ## operations are evaluated during
       macro substitution (ISO C, Appendix A.6.1, point 12).
     */
    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 19.12,
       multiple use of '#/##' operators in macro definition
     */

    /* Whether setjmp is a macro or an external identifier (ISO C,
       Appendix A.6.1, point 14).
       See Rule 20.1
     */

/* Rule 1.3 (req) **********************************/

    /* not currently supported */

/* Rule 1.4 (req) **********************************/

    -idlen(31)                  /* flag names identical in the first 31 characters */
    +e621                       /* Identifier clash - length set by -idlen */
    +elib(621)                  /* Identifier clash - length set by -idlen */
    -append(621,[MISRA 2004 Rules 1.2, 1.4 and 5.1])

/* Rule 1.5 (adv) **********************************/

    /* not currently supported */

/* Rule 2.1 (req) **********************************/

    -deprecate(keyword,asm,[MISRA 2004 Rule 2.1])
    +e586   /* to activate the deprecation message */
    +elib(586)   /* to activate the deprecation message */

/* Rule 2.2 (req) **********************************/

    -A(C90) /* strict ANSI */
    +e950   /* flag non-ANSI word or construct */
    +elib(950)   /* flag non-ANSI word or construct */

/* Rule 2.3 (req) **********************************/

    -fnc                        /* flag nested comments */
    +e602                       /* comment within comment */
    +elib(602)                  /* comment within comment */
    -append(602,[MISRA 2004 Rule 2.3])

/* Rule 2.4 (adv) **********************************/

    /* not currently supported */

/* Rule 3.1 (req) **********************************/

    /* not currently supported */

/* Rule 3.2 (req) **********************************/

    /* not currently supported */

/* Rule 3.3 (adv) **********************************/

    /* not currently supported */

/* Rule 3.4 (req) **********************************/

    /* not currently supported */

/* Rule 3.5 (req) **********************************/

    /* not currently supported */

/* Rule 3.6 (req) **********************************/

    /* covered by the use of the +elib() options within
       this options file */

/* Rule 4.1 (req) **********************************/

    +e606                       /* non-ANSI escape sequence */
    +elib(606)                  /* non-ANSI escape sequence */
    -append(606,[MISRA 2004 Rule 4.1])

/* Rule 4.2 (req) **********************************/

    -ftg                        /* inhibit use of trigraphs */
    +e739                       /* activate trigraph in string message */
    +elib(739)                  /* activate trigraph in string message */
    -append(739,[MISRA 2004 Rule 4.2])

/* Rule 5.1 (req) **********************************/

    -idlen(31)  /* flag names identical in the first 31 characters */
    +e621       /* Identifier clash - length set by -idlen */
    +elib(621)  /* Identifier clash - length set by -idlen */

/* Rule 5.2 (req) **********************************/

    +e578                         /* enable reports of name hiding */
    +elib(578)                    /* enable reports of name hiding */
    -append(578,[MISRA 2004 Rules 5.2, 5.3, 5.4, 5.5, 5.6 and 5.7])

/* Rule 5.3 (req) **********************************/

    +e578               /* enable reports of name hiding */
    +elib(578)          /* enable reports of name hiding */
    +e623               /* redefining the storage class of symbol */
    +elib(623)          /* redefining the storage class of symbol */
    -append(623,[MISRA 2004 Rule 5.3])

/* Rule 5.4 (req) **********************************/

    +e578   /* Declaration of Symbol hides Symbol */
    +elib(578)   /* Declaration of Symbol hides Symbol */
    +e14
    +elib(14)
    -append(14,[MISRA 2004 Rules 5.4 and 8.9])
    +e15
    +elib(15)
    -append(15,[MISRA 2004 Rules 5.4 and 8.4])

/* Rule 5.5 (adv) **********************************/

    +e578   /* Declaration of Symbol hides Symbol */
    +elib(578)   /* Declaration of Symbol hides Symbol */
    +e580                         /* enable reports of name hiding */
    +elib(580)                    /* enable reports of name hiding */
    -append(580,[MISRA 2004 Rule 5.5, 5.6, and 5.7])

/* Rule 5.6 (adv) **********************************/

    +e578   /* enable reports of name hiding */
    +elib(578)   /* enable reports of name hiding */
    +e580   /* enable reports of name hiding */
    +elib(580)   /* enable reports of name hiding */

/* Rule 5.7 (adv) **********************************/

    +e578   /* enable reports of name hiding */
    +elib(578)   /* enable reports of name hiding */
    +e580   /* enable reports of name hiding */
    +elib(580)   /* enable reports of name hiding */

/* Rule 6.1 (req) **********************************/

    /* not currently supported */

/* Rule 6.2 (req) **********************************/

    /* not currently supported */

/* Rule 6.3 (adv) **********************************/

    +e970               /* flag modifiers used outside of typedefs */
    +elib(970)          /* flag modifiers used outside of typedefs */
    -append(970,[MISRA 2004 Rule 6.3])

/* Rule 6.4 (req) **********************************/

    +e46                /* field type should be int */
    +elib(46)           /* field type should be int */
    -append(46,[MISRA 2004 Rule 6.4])

/* Rule 6.5 (req) **********************************/

    +e806               /* small bit field is signed rather than unsigned */
    +elib(806)          /* small bit field is signed rather than unsigned */
    -append(806,[MISRA 2004 Rule 6.5])

/* Rule 7.1 (req) **********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 7.1, Octal constant
       or octal escape sequence used
     */

/* Rule 8.1 (req) **********************************/

    +e718                        /* Symbol undeclared */
    +elib(718)                   /* Symbol undeclared */
    -append(718,[MISRA 2004 Rule 8.1])
    +e746
    +elib(746)
    -append(746,[MISRA 2004 Rule 8.1])
    +e937                     /* old-style function declaration */
    +elib(937)                /* old-style function declaration */
    -append(937,[MISRA 2004 Rules 8.1 and 16.5])
    +e957
    +elib(957)
    -append(957,[MISRA 2004 Rule 8.1])

/* Rule 8.2 (req) **********************************/

    +e745                           /* function has no explicit type */
    +elib(745)                      /* function has no explicit type */
    +e939                           /* return type defaults to int */
    +elib(939)                      /* return type defaults to int */
    -append(745,[MISRA 2004 Rule 8.2])
    -append(939,[MISRA 2004 Rule 8.2])

/* Rule 8.3 (req) **********************************/

    -fvr                          /* varying return mode not allowed */
    +e18                          /* symbol redeclared */
    +elib(18)                     /* symbol redeclared */
    +e516                         /* argument type conflict */
    +elib(516)                    /* argument type conflict */
    +e532                         /* return mode of symbol inconsistent */
    +elib(532)                    /* return mode of symbol inconsistent */
    -append(18,[Encompasses MISRA 2004 Rule 8.3])
    -append(516,[MISRA 2004 Rule 8.3])
    -append(532,[MISRA 2004 Rule 8.3])

/* Rule 8.4 (req) **********************************/

    +e15        /* symbol redeclared */
    +elib(15)   /* symbol redeclared */
    +e64        /* flag type mismatch */
    +elib(64)   /* flag type mismatch */
    -append(64,[MISRA 2004 Rule 8.4])

/* Rule 8.5 (req) **********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 8.5,
       no object/function definitions in header files
     */

/* Rule 8.6 (req) **********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 8.6,
       function not declared at file scope
     */

/* Rule 8.7 (req) **********************************/

    /* not currently supported */

/* Rule 8.8 (req) **********************************/

    /* not currently supported */

/* Rule 8.9 (req) **********************************/

    +e14        /* Symbol previously defined */
    +elib(14)   /* Symbol previously defined */

/* Rule 8.10 (req) *********************************/

    +e765                       /* symbol could be made static */
    +elib(765)                  /* symbol could be made static */
    -append(765,[MISRA 2004 Rule 8.10])

/* Rule 8.11 (req) *********************************/

    +e512                        /* symbol previously used as static */
    +elib(512)                   /* symbol previously used as static */
    -append(512,[MISRA 2004 Rule 8.11])

/* Rule 8.12 (req) *********************************/

    +e85    /* Array has 0 dimension */
    +elib(85)    /* Array has 0 dimension */
    -append(85,[MISRA 2004 Rule 8.12])

/* Rule 9.1 (req) **********************************/

    +e644                   /* Symbol may not have been initialized */
    +elib(644)              /* Symbol may not have been initialized */
    +e771                   /* Symbol conceivably not initialized */
    +elib(771)              /* Symbol conceivably not initialized */
    +e530                   /* Symbol not initialized */
    +elib(530)              /* Symbol not initialized */
    -append(644,[MISRA 2004 Rule 9.1])
    -append(771,[MISRA 2004 Rule 9.1])
    -append(530,[MISRA 2004 Rule 9.1])

/* Rule 9.2 (req) **********************************/

    +e940                   /* omitted braces within an initializer */
    +elib(940)              /* omitted braces within an initializer */
    -append(940,[MISRA 2004 Rule 9.2])

/* Rule 9.3 (req) **********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 9.3,
       should initialize either all enum members or only the first
     */

/* Rule 10.1 (req) *********************************/

    +e524                                                   /* loss of precision */
    +elib(524)                                              /* loss of precision */
    -append(524,[MISRA 2004 Rule 10.1])
    +e653                                                   /* possible loss of fraction */
    +elib(653)                                              /* possible loss of fraction */
    -append(653,[MISRA 2004 Rules 10.1 and 10.4])

/* Rule 10.2 (req) *********************************/

    +e747                       /* significant prototype coercion */
    +elib(747)                  /* significant prototype coercion */
    +e918                       /* prototype coercion of pointers */
    +elib(918)                  /* prototype coercion of pointers */
    -append(747,[MISRA 2004 Rule 10.2])
    -append(918,[MISRA 2004 Rule 10.2])

/* Rule 10.3 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 10.3,
       Prohibited cast of complex integer expression
     */

/* Rule 10.4 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 10.4,
       Prohibited cast of complex floating-point
       expression: Casting to larger type
     */

/* Rule 10.5 (req) *********************************/

    +e701                        /* shift left of signed quantity */
    +elib(701)                   /* shift left of signed quantity */
    +e702                        /* shift right of signed quantity */
    +elib(702)                   /* shift right of signed quantity */
    -append(701,[MISRA 2004 Rule 10.5])
    -append(702,[MISRA 2004 Rule 10.5])

/* Rule 10.6 (req) *********************************/

    /* not currently supported */

/* Rule 11.1 (req) *********************************/

    +esym(68,pointer)
    +esym(922,pointer)
    +e923                        /* cast pointer/non-pointer */
    +elib(923)                   /* cast pointer/non-pointer */
    -append(923,[Encompasses MISRA 2004 Rule 11.1])

/* Rule 11.2 (req) *********************************/

    +esym(68,pointer)            /* Cannot cast from pointer to float */
    +e71                         /* Cannot cast between types */
    +elib(71)                    /* Cannot cast between types */
    -append(71,[MISRA 2004 Rule 11.2])

/* Rule 11.3 (adv) *********************************/

    +e923                        /* cast pointer/non-pointer */
    +elib(923)                   /* cast pointer/non-pointer */
    -append(923,[MISRA 2004 Rule 11.3])

/* Rule 11.4 (adv) *********************************/

    +e926   /* cast from pointer to pointer */
    +elib(926)   /* cast from pointer to pointer */
    +e927   /* cast from pointer to pointer */
    +elib(927)   /* cast from pointer to pointer */
    +e928   /* cast from pointer to pointer */
    +elib(928)   /* cast from pointer to pointer */
    +e929   /* cast from pointer to pointer */
    +elib(929)   /* cast from pointer to pointer */
    -append(926,[MISRA 2004 Rule 11.4])
    -append(927,[MISRA 2004 Rule 11.4])
    -append(928,[MISRA 2004 Rule 11.4])
    -append(929,[MISRA 2004 Rule 11.4])

/* Rule 11.5 (req) *********************************/

    /* not currently supported */

/* Rule 12.1 (adv) *********************************/

    /* we generate note 961 as below
       Note 961: Violates MISRA 2004 Advisory Rule 12.1,
       dependence placed on C's operator precedence
     */
    +e834  /* confusing operator sequence (same precedence) */
    +elib(834)  /* confusing operator sequence (same precedence) */
    -append(834,[MISRA 2004 Rule 12.1])

/* Rule 12.2 (req) *********************************/

    +e564                       /* order of evaluation */
    +elib(564)                  /* order of evaluation */
    -append(564,[MISRA 2004 Rule 12.2])

/* Rule 12.3 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 12.3,
       'sizeof' used on expressions with side effect
     */

/* Rule 12.4 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 12.4,
       side effects on right hand side of logical operator
     */

/* Rule 12.5 (req) *********************************/

    /* not currently supported */

/* Rule 12.6 (adv) *********************************/

    /* not currently supported */

/* Rule 12.7 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 12.7,
       Bitwise operator applied to signed underlying type
     */

/* Rule 12.8 (req) *********************************/

    +e572                        /* excessive shift value */
    +elib(572)                   /* excessive shift value */
    -append(572,[MISRA 2004 Rule 12.8])

/* Rule 12.9 (req) *********************************/

    +e501                        /* expected signed type */
    +elib(501)                   /* expected signed type */
    -append(501,[MISRA 2004 Rule 12.9])

/* Rule 12.10 (req) ********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 42,
       comma operator used
     */

/* Rule 12.11 (adv) ********************************/

    +e648                       /* overflow in computing constant */
    +elib(648)                  /* overflow in computing constant */
    -append(648,[MISRA 2004 Rule 12.11])

/* Rule 12.12 (req) ********************************/

    /* not currently supported */

/* Rule 12.13 (req) ********************************/

    /* not currently supported */

/* Rule 13.1 (req) *********************************/

    +e720                         /* Boolean test of assignment */
    +elib(720)                    /* Boolean test of assignment */
    -append(720,[MISRA 2004 Rules 13.1 and 13.2])
    +e820
    +elib(820)
    -append(820,[MISRA 2004 Rule 13.1])

/* Rule 13.2 (adv) *********************************/

    +e720
    +elib(720)

/* Rule 13.3 (req) *********************************/

    +e777                        /* testing floats for equality */
    +elib(777)                   /* testing floats for equality */
    -append(777,[MISRA 2004 Rule 13.3])

/* Rule 13.4 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 13.4,
       floating point variable used as loop counter
     */

/* Rule 13.5 (req) *********************************/

    /* not currently supported */

/* Rule 13.6 (req) *********************************/

    /* not currently supported */

/* Rule 13.7 (req) *********************************/

    +e506
    +elib(506)
    -append(506,[MISRA 2004 Rules 13.7 and 14.1])

/* Rule 14.1 (req) *********************************/

    +e506
    +elib(506)
    +e527                       /* unreachable */
    +elib(527)                  /* unreachable */
    -append(527,[MISRA 2004 Rule 14.1])
    +e681
    +elib(681)
    -append(681,[MISRA 2004 Rule 14.1])
    +e827
    +elib(827)
    -append(827,[MISRA 2004 Rule 14.1])

/* Rule 14.2 (req) *********************************/

    +e505
    +elib(505)
    +e522
    +elib(522)
    -append(505,[MISRA 2004 Rule 14.2])
    -append(522,[MISRA 2004 Rule 14.2])

/* Rule 14.3 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 14.3,
       null statement not in line by itself
     */

/* Rule 14.4 (req) *********************************/

    +e801
    +elib(801)
    -append(801,[MISRA 2004 Rule 14.4])

/* Rule 14.5 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 14.5,
       continue statement detected
     */

/* Rule 14.6 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 14.6,
       more than one 'break' terminates loop
     */

/* Rule 14.7 (req) *********************************/

    +e904                   /* return before function end */
    +elib(904)              /* return before function end */
    -append(904,[MISRA 2004 Rule 14.7])

/* Rule 14.8 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 14.8,
       left brace expected for switch, for, do and while
     */

/* Rule 14.9 (req) *********************************/


    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 14.9,
       left brace expected for if, else and else if
     */

/* Rule 14.10 (req) ********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 14.10,
       no 'else' at end of 'if ... else if' chain
     */

/* Rule 15.1 (req) *********************************/

    +e44    /* Need a switch */
    +elib(44)    /* Need a switch */
    -append(44,[MISRA 2004 Rule 15.1])

/* Rule 15.2 (req) *********************************/

    +e616
    +elib(616)
    -append(616,[MISRA 2004 Rule 15.2])
    +e825
    +elib(825)
    -append(825,[MISRA 2004 Rule 15.2])

/* Rule 15.3 (req) *********************************/

    +e744                         /* switch statement has no default */
    +elib(744)                    /* switch statement has no default */
    -append(744,[MISRA 2004 Rule 15.3])

/* Rule 15.4 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 15.4,
       boolean value in switch statement
     */

/* Rule 15.5 (req) *********************************/

    +e764                         /* switch does not have a case */
    +elib(764)                    /* switch does not have a case */
    -append(764,[MISRA 2004 Rule 15.5])

/* Rule 16.1 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 16.1,
       function has variable number of arguments
     */

/* Rule 16.2 (req) *********************************/

    +stack()
    +estring(974,*recursive*)
    -append(974,[MISRA 2004 Rule 16.2])

/* Rule 16.3 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 16.3,
       all parameters shall have identifiers
     */

/* Rule 16.4 (req) *********************************/

    /* not currently supported */

/* Rule 16.5 (req) *********************************/

    +e937   /* old-style function declaration */
    +elib(937)   /* old-style function declaration */

/* Rule 16.6 (req) *********************************/

    +e118               /* too few arguments for prototype */
    +elib(118)          /* too few arguments for prototype */
    +e119               /* too many arguments for prototype */
    +elib(119)          /* too many arguments for prototype */
    -append(118,[MISRA 2004 Rule 16.6])
    -append(119,[MISRA 2004 Rule 16.6])

/* Rule 16.7 (adv) *********************************/

    +e818                       /* use const on paramaters where appropriate */
    +elib(818)                  /* use const on paramaters where appropriate */
    -append(818,[MISRA 2004 Rule 16.7])

/* Rule 16.8 (req) *********************************/

    +e533                       /* function should return a value */
    +elib(533)                  /* function should return a value */
    -append(533,[MISRA 2004 Rule 16.8])

/* Rule 16.9 (req) *********************************/

    /* not currently supported */

/* Rule 16.10 (req) ********************************/

    +e534
    +elib(534)
    -append(534,[Encompasses MISRA 2004 Rule 16.10])

/* Rule 17.1 (req) *********************************/

    /* not currently supported */

/* Rule 17.2 (req) *********************************/

    +e946          /* relational or subtract operator applied to pointers */
    +elib(946)     /* relational or subtract operator applied to pointers */
    -append(946,[MISRA 2004 Rules 17.2 and 17.3])
    +e947          /* relational or subtract operator applied to pointers */
    +elib(947)     /* relational or subtract operator applied to pointers */
    -append(947,[MISRA 2004 Rules 17.2])

/* Rule 17.3 (req) *********************************/

    /* relational or subtract operator applied to pointers.
       See Rule 17.2
     */

/* Rule 17.4 (req) *********************************/

    /* not currently supported */

/* Rule 17.5 (adv) *********************************/

    /* we generate note 961 as below */
    /* Note 961: Violates MISRA 2004 Advisory Rule 17.5, */
    /* More than two pointer indirection levels used */

/* Rule 17.6 (req) *********************************/

    +e733               /* assigning address of auto to outer scope symbol */
    +elib(733)          /* assigning address of auto to outer scope symbol */
    -append(733,[MISRA 2004 Rule 17.6])
    +e789               /* assigning address of auto to static */
    +elib(789)          /* assigning address of auto to static */
    -append(789,[MISRA 2004 Rule 17.6])

/* Rule 18.1 (req) *********************************/

    +e43                         /* vacuous type for variable */
    +elib(43)                    /* vacuous type for variable */
    -append(43,[MISRA 2004 Rule 18.1])

/* Rule 18.2 (req) *********************************/

    /* not currently supported */

/* Rule 18.3 (req) *********************************/

    /* not currently supported */

/* Rule 18.4 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 18.4,
       unions shall not be used
     */

/* Rule 19.1 (adv) *********************************/

    /* we generate note 961 as below
       Note 961: Violates MISRA 2004 Advisory Rule 19.1,
       only preprocessor statements and comments before '#include' */

/* Rule 19.2 (adv) *********************************/

    /* we generate note 961 as below
       Note 961: Violates MISRA 2004 Advisory Rule 19.2,
       header file name with non-standard character */

/* Rule 19.3 (req) *********************************/

    +e12                       /* Need < or " after #include */
    +elib(12)                  /* Need < or " after #include */
    -append(12,[MISRA 2004 Rule 19.3])

/* Rule 19.4 (req) *********************************/

    +e773                      /* expression-like macro not parenthesized */
    +elib(773)                 /* expression-like macro not parenthesized */
    -append(773,[MISRA 2004 Rules 19.4 and 19.10])

/* Rule 19.5 (req) *********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 19.5,
       '#define/#undef' used within a block
     */

/* Rule 19.6 (req) *********************************/

    /* we generate note 961 as below
       Note 960: Violates MISRA 2004 Advisory Rule 19.6,
       use of '#undef' is discouraged
     */

/* Rule 19.7 (adv) *********************************/

    /* we generate note 961 as below */
    /* Note 961: Violates MISRA 2004 Advisory Rule 19.7, */
    /* Function-like macro defined */

/* Rule 19.8 (req) *********************************/

    +e131                         /* syntax error in call of macro */
    +elib(131)                    /* syntax error in call of macro */
    -append(131,[MISRA 2004 Rule 19.8])

/* Rule 19.9 (req) *********************************/

    +e436
    +elib(436)
    -append(436,[MISRA 2004 Rule 19.9])

/* Rule 19.10 (req) ********************************/

    /* expression-like macro not parenthesized
       See Rule 19.4
     */

/* Rule 19.11 (req) ********************************/

    +e553                        /* undefined preprocessor variable */
    +elib(553)                   /* undefined preprocessor variable */
    -append(553,[MISRA 2004 Rule 19.11])

/* Rule 19.12 (req) ********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 19.12,
       multiple use of '#/##' operators in macro definition
     */

/* Rule 19.13 (adv) ********************************/

    /* we generate note 961 as below
       Note 961: Violates MISRA 2004 Advisory Rule 19.13,
       '#/##' operators used
     */

/* Rule 19.14 (req) ********************************/

    /* we generate note 960 as below
       Note 960: Violates MISRA 2004 Required Rule 19.14,
       non-standard use of 'defined' preprocessor statement
     */

/* Rule 19.15 (req) ********************************/

    +e537   /* Repeated include file */
    +elib(537)   /* Repeated include file */
    -append(537,[MISRA 2004 Rule 19.15])

/* Rule 19.16 (req) ********************************/

    /* not currently supported */

/* Rule 19.17 (req) ********************************/

    +e405
    +elib(405)
    -append(405,[MISRA 2004 Rule 19.17])

/* Rule 20.1 (req) *********************************/

    +e683                   /* complain about #define standard functions */
    +elib(683)              /* complain about #define standard functions */
    -append(683,[MISRA 2004 Rule 20.1])

/* Rule 20.2 (req) *********************************/

    /* not currently supported */

/* Rule 20.3 (req) *********************************/

    /* 100 calls to standard library functions are monitored
       users can specify additional constraints for other functions */

/* Rule 20.4 (req) *********************************/

    +e586
    +elib(586)
    -deprecate( function, calloc, [MISRA 2004 Rule 20.4] )
    -deprecate( function, malloc, [MISRA 2004 Rule 20.4] )
    -deprecate( function, realloc, [MISRA 2004 Rule 20.4] )
    -deprecate( function, free, [MISRA 2004 Rule 20.4] )

/* Rule 20.5 (req) *********************************/

    -deprecate( variable, errno, [MISRA 2004 Rule 20.5] )

/* Rule 20.6 (req) *********************************/

    -deprecate( macro, offsetof, [MISRA 2004 Rule 20.6] )

/* Rule 20.7 (req) *********************************/

    +e586
    +elib(586)
    -deprecate( function, longjmp, [MISRA 2004 Rule 20.7] )
    -deprecate( function, setjmp, [MISRA 2004 Rule 20.7] )

/* Rule 20.8 (req) *********************************/

    +e586
    +elib(586)
    -deprecate( function, signal, [MISRA 2004 Rule 20.8] )
    -deprecate( function, raise, [MISRA 2004 Rule 20.8] )

/* Rule 20.9 (req) *********************************/

    +e829
    +elib(829)
    -headerwarn(stdio.h)
    -append(829(stdio.h), [MISRA 2004 Rule 20.9])

/* Rule 20.10 (req) ********************************/

    +e586
    +elib(586)
    -deprecate( function, atof, [MISRA 2004 Rule 20.10] )
    -deprecate( function, atoi, [MISRA 2004 Rule 20.10] )
    -deprecate( function, atol, [MISRA 2004 Rule 20.10] )

/* Rule 20.11 (req) ********************************/

    +e586
    +elib(586)
    -deprecate( function, abort, [MISRA 2004 Rule 20.11] )
    -deprecate( function, exit, [MISRA 2004 Rule 20.11] )
    -deprecate( function, getenv, [MISRA 2004 Rule 20.11] )
    -deprecate( function, system, [MISRA 2004 Rule 20.11] )

/* Rule 20.12 (req) ********************************/

    +e586
    +elib(586)
    -deprecate( function, time, [MISRA 2004 Rule 20.12] )
    -deprecate( function, strftime, [MISRA 2004 Rule 20.12] )
    -deprecate( function, clock, [MISRA 2004 Rule 20.12] )
    -deprecate( function, difftime, [MISRA 2004 Rule 20.12] )
    -deprecate( function, mktime, [MISRA 2004 Rule 20.12] )

/* Rule 21.1 (req) *********************************/

    /* achieved by using PC-Lint/FlexeLint */
